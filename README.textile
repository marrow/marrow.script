


h2. Simple Interface

Idea stolen patently from the "commandline":http://pypi.python.org/pypi/commandline/ module, and extended.

If given a generic callable, positional arguments and keyword arguments can be filled in automatically:

<pre><code>def dir(path, verbose=False, cool=[]):
    """Get a directory listing, similar
    to the UNIX `ls` command."""
    pass</code></pre>

If the user requests help on this command (or fails to enter required arguments), they will see:

<pre><code>Get a directory listing, similar to the UNIX `ls` command.
Usage: command.py [OPTIONS] <path>

OPTIONS may be one or more of:

 --cool=VAL  Override this value.
             Default: []
 --help      Display this help and exit.
 --verbose   Toggle this value.
             Default: False
 --version   Show version and copyright information, then exit.</code></pre>

You can also use a class:

<pre><code>class MyCommand(object):
    """This is just an example."""
    
    def __init__(self, verbose=False, quiet=False):
        pass # called before the sub-command
    
    @annotate(string1=str, string2=str, int1=float)
    @describe(string1="Documentation for string1.")
    def foo(self, string1, string2='something', int1=1)
        """Sample command."""
        pass</code></pre>

Help without a method name will see:

<pre><code>Usage: script.py [--verbose[=?]] [--quiet[=?]] COMMAND [ARGS]
    
This is just an example.

COMMAND may be one of:
    foo         Sample command.

For help on a specific command, specify a command and --help or -h.</code></pre>

Any text beyond the first (de-wrapped) line of the docstring will appear below the option list.