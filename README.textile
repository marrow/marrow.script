h1(#title). Marrow Scripting

bq(subtitle). Enabling simplified command line script creation.

bq(byline). (C) 2010, Alice Bevan-McGregor

bq(byline). "https://github.com/pulp/marrow.script":github-marrowscript

[github-marrowscript]https://github.com/pulp/marrow.script



h2(#what-is). %1.% What is Marrow Scripting?

The @marrow.script@ package is a small library for turning average every-day callables (such as functions and class methods) into command-line scripts while automatically determining argument naming, typecasting, and generating things like help and version information.  All behavior can be overridden by you, the developer, giving you a flexible and easy to develop with command line parsing library to replace @optparse@ and @argparse@.  This package is not a wrapper around existing parsing libraries, and attempts to match the syntax common to GNU software.

In a larger scope @marrow.script@ aims to replace other high-level command-line scripting libraries such as "Paste Script":pastescript and "Commandline":commandline while also implementing "Python 3":python compatibility.


[pastescript]http://pythonpaste.org/script/
[commandline]http://pypi.python.org/pypi/commandline/
[python]http://www.python.org/



h2(#installation). %2.% Installation

Installing @marrow.script@ is easy, just execute the following in a terminal:

<pre><code>pip install marrow.script</code></pre>

If you add @marrow.script@ to the @install_requires@ argument of the call to @setup()@ in your application's @setup.py@ file, @marrow.script@ will be automatically installed and made available when your own application is installed.


h3(#install-dev). %2.1.% Development Version

Development takes place on "GitHub":github in the "marrow.script":github-marrowscript project.  Issue tracking, documentation, and downloads are provided there.

Installing the current development version requires "Git":git, a distributes source code management system.  If you have Git, you can run the following to download and _link_ the development version into your Python runtime:

<pre><code>git clone https://github.com/pulp/marrow.script.git
(cd marrow.script; python setup.py develop)</code></pre>

You can upgrade to the latest version at any time:

<pre><code>(cd marrow.script; git pull; python setup.py develop)</code></pre>

If you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes, and submit a pull request.  This process is beyond the scope of this documentation; for more information, see "GitHub's documentation":github-help.


[github]https://github.com/
[git]http://git-scm.com/
[github-help]http://help.github.com/



h2(#basic). %3.% Basic Usage

You can pass any callable object (function, method, class, or class instance with a @__call__@ method).  For example, the following function illustrates a script that takes no arguments:

<pre><code>def hello():
    print "Hello world!"</code></pre>

To tell @marrow.script@ to execute this function when run, add the following to the module containing the @hello@ function:

<pre><code>if __name__ == '__main__':
    from marrow.script import execute
    execute(hello)</code></pre>


h3(#basic-decorator). %3.1.% Script Meta-Data

Included are several decorators which help add metadata to your callable, describing the callable itself or "adding additional detail to the argument list":#decorators.  First an example, then we'll describe its parts in more detail:

<pre><code>from marrow.script import script

@script(
        title='ls clone',
        version="1.0",
        copyright="Copyright 2010 Alice Bevan-McGregor"
    )
def catalog():
    pass</code></pre>

Currently the @script@ decorator accepts the following keyword arguments:

|<. @title@ | Shown in the help and version text in parentheses after the script filename. |
|<. @version@ | Shown when the script is called with @-V@ or @--version@. |
|<. @copyright@ | Displayed on its own line after the version information. |
|<. @min@ | The minimum number of positional arguments, used if the callable accepts @*args@. |
|<. @max@ | The maximum number of positional arguments, used if the callable accepts @*args@. |

These values are stored in a dictionary attribute, @_cmd_script@, of the callable.  The decorator does not modify code execution flow, merely returning the original callable after adding that property.


h3(#help-text). %3.2.% Help and Version Text

Marrow Script automatically generates help text for your callable based on the Python module's name, the callable's docstring (if present), and argument list.  It automatically adds a @--help/-h@ switch and handles its presence in the command line automatically.  Additionally, if the command line fails to describe the required fields (or describes fields that the callable can't handle) the help text is displayed.  The help text for our @hello@ example, above, would be displayed thusly:

<pre><code>Usage: hello.py [OPTIONS] 

OPTIONS may be one or more of:

 --help, -h     Display this help and exit.
 --version, -V  Show version and copyright information, then exit.</code></pre>

You can override the help text generator (which must be a callable accepting two arguments: the callable and callable specification) by utilizing the Parser class directly:

<pre id="custom-parser-example"><code>import sys
from marrow.script import Parser

def hello():
    print "Hello world!"

def myhelpfunc(v, spec):
    print "Custom help text."

sys.exit(Parser(hello, help=myhelpfunc)(sys.argv[1:]))</code></pre>

Executing this script with @-h@ or @--help@ will display:

<pre><code>Custom help text.</code></pre>

Similarly, you can override the version text generator by passing @version=callable@ to the Parser class.  The version text callable has the same argument list as the help text callable.


h3(#status-codes). %3.3.% Exit Status Codes

The value returned by the callable should be None (exit code of zero) or a number.  This number is passed through to @sys.exit()@.  An example of capturing errors gracefully:

<pre><code>def graceful():
    try:
        pass # do some work
    
    except:
        return 1</code></pre>


h3(#basic-testing). %3.4.% Testing

By utilizing the Parser class directly, as in the "custom parser example":#custom-parser-example above, you can pass a custom list of arguments and capture the return code.  This can aid in unit testing of your code, for example:

<pre><code>from marrow.script import Parser

def hello():
    print "Hello world!"

assert Parser(hello)([]) == 0 # Ensure the return code is zero.</code></pre>


h2(#arguments). %4.% Argument Handling

Marrow Script introspects your callable to determine the argument list.  Not only does it examine the names of the arguments, but it also understands the following in the argument list:

|^<. @required@ |^. Required positional arguments. |
|^<. @value=None@ |/2^. Explicit values, these are converted to strings. |
|^<. @name="world"@ |
|^<. @switch=False@ |^. Explicit boolean switches. If matched on the command-line, the switch is flipped to its opposite value. |
|^<. @age=18@ |^. Explicit numeric values are converted to numbers automatically. |
|^<. @*args@ |^. Unlimited positional arguments. |
|^<. @**kwargs@ |^. A rare use-case, your callable can accept an unlimited number of name=value pairs from the command line. |


h3(#decorators). %4.1.% Descriptive Decorators

Marrow Script comes with a number of decorators which expand upon the knowledge that can be gained via introspection.  These are:

|<. @annotate@ | Explicitly defines the typecasting for each argument.[1][2] |
|<. @describe@ | Overrides the default help text for each argument.[2] |
|<. @short@ | Defines a mapping of single-character to full variable name. |
|<. @callbacks@ | Defines callbacks executed by passing the command-line value (after typecasting) and argument specification. Returns an alternate value to store. |

fn1. Typecasting is performed by any callable that accepts a string value as input; the built-in types @str@, @unicode@, @int@, etc. all support this.  Additionally, to facilitate easier conversion of booleans and lists you can use "marrow.util":marrowutil conversion routines like @boolean@ and @array@.

fn2. Arguments to these decorators are @name=value@ pairs whereby the name is the name of the argument to your callable.

[marrowutil]https://github.com/pulp/marrow.util


h2(#advanced). %5.% Advanced Usage

You can pass a class as the callable to execute. Arguments to @__init__@ are processed first, then the first unmatched non-switch argument is used as the method to call. Arguments ignored by @__init__@ are then processed using the method's call spec.  For example, consider the following class definition:

<pre><code>class Service(object):
    def __init__(self, verbose=False):
        pass # configure logging based on `verbose`
    
    def start(self):
        pass # start something
    
    def stop(self, force=False):
        pass # stop doing things
    
    def restart(self):
        self.stop()
        self.start()</code></pre>

You can call the script using a number of different forms:

* @./myscript.py@ or @./myscript.py --help@ -- display the help text for the class's __init__ and a list of viable sub-commands.
* @./myscript.py [start|stop|restart] --help@ -- display help for the sub-command.
* @./myscript.py start --verbose@ -- Arguments don't have a hard limit on the order.
* @./myscript.py --verbose stop --force@


h2(#license). %6.% Marrow Script License

Marrow Script has been released under the MIT Open Source license.


h3. %6.1.% The MIT License

Copyright (C) 2010 Alice Bevan-McGregor and contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
